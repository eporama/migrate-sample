# ************************************************************
# Sequel Pro SQL dump
# Version 4004
#
# http://www.sequelpro.com/
# http://code.google.com/p/sequel-pro/
#
# Host: localhost (MySQL 5.6.10)
# Database: migrations
# Generation Time: 2013-03-27 02:54:15 +0000
# ************************************************************


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


# Dump of table authors
# ------------------------------------------------------------

DROP TABLE IF EXISTS `authors`;

CREATE TABLE `authors` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL DEFAULT '',
  `email` varchar(255) NOT NULL DEFAULT '',
  `password` varchar(255) NOT NULL DEFAULT '',
  `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `last_login` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `authors` WRITE;
/*!40000 ALTER TABLE `authors` DISABLE KEYS */;

INSERT INTO `authors` (`id`, `username`, `email`, `password`, `date_created`, `last_login`)
VALUES
	(1,'eporama','eporama@example.com','SecurePassword','2013-03-24 22:22:55','2013-03-24 22:26:48'),
	(2,'erik','erik@example.com','mypass1234','2013-03-24 22:24:17','2013-03-24 22:26:40'),
	(3,'dan','dan@example.com','danRulz**','2013-03-24 22:24:46','2013-03-24 22:26:31');

/*!40000 ALTER TABLE `authors` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table stories
# ------------------------------------------------------------

DROP TABLE IF EXISTS `stories`;

CREATE TABLE `stories` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `body` text,
  `author_id` int(11) NOT NULL,
  `date_created` date DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `stories` WRITE;
/*!40000 ALTER TABLE `stories` DISABLE KEYS */;

INSERT INTO `stories` (`id`, `title`, `body`, `author_id`, `date_created`)
VALUES
	(1,'Login Destination snippets','Typically, upon login, users are directed to the page from which they logged in.  If that is \"/user\" then you are brought back to the user profile page.  If you would like people to be sent to specific pages after logging in, there are a couple of modules that can help.  LoginToboggan (http://drupal.org/project/logintoboggan) is one of the most common login tools, and as the project page shows, it does many different things from allowing users to login with their email address, giving you a small horizontal login block.  It also includes the option to allow users to be sent to a specific page the first time they login (this is when they validate their email address by clicking on the link that was in the email or by entering the system generated password for the first time).\r\n\r\nHowever, if you\'d like your users to be redirected to the same page every time they log in, you need Login Destination.  The Login Destination (LD) module (http://drupal.org/project/login_destination) lets you configure where users end up when they log in.  LD provides two ways to send users to a specific location.\r\n\r\nThe first is by entering a static string which can be a system path or alias (i.e., node/234 or content/my-story-title).  One nice feature is that if you have a path alias for your node, it will send the user to the alias even if you use the node value (this is more important later).\r\n\r\nIn our scenario, we had Organic Groups (OG) set up with each group having a \"homepage\" (which is actually the group node).  Most users were only members of a single group (state/district-based groups).  But some were members of multiple groups and also in an \"Staff\" role.  So we wanted everyone in the Staff role to be redirected to one page, while everyone else should be redirected to the homepage of the one group of which they were a member.\r\n\r\nLD allows us to also use PHP to return a string (or array) for the destination.  This allows us to do some basic logic to return different values based on various conditions.\r\n\r\nSo first, if we\'re members of the Staff role, we should redirect to PageA:\r\n\r\n<?php\r\nglobal $user; //this loads up the currently logged in user into a variable\r\n\r\nif (in_array(\'Staff\', array_values($user->roles))) {\r\n  // $user->roles is an array of which roles the user is assigned since it is an associative array,\r\n  // array_values will look at the values of each element in the array\r\n\r\n  return \'PageA\';\r\n}\r\n?>\r\n\r\nThen, we need to add the code to send group members to their group homepage.\r\n\r\n<?php\r\nif ($group = current($user->og_groups)) {\r\n  // the $user->og_groups property holds the groups of which a user is a member.  The current() function\r\n  // will look at the first value in the array by default.\r\n\r\n  return \'node/\' . $group[\'nid\']; \r\n  // the $group object has a property of \"nid\" which will return the node id for the group\r\n  // returning \'node/124\', for example will send you to the group homepage\r\n  // and the magic is that if you have a path alias for that node, (groups/Maryland, for example), \r\n  // the alias will show up as the actual URL for the user\r\n}\r\n?>\r\n\r\nIf you don\'t meet either condition, normal Drupal rules would apply and you will most likely be sent to the page from which you were logging in or you can add a statement to return the value <code>\'front\'</code> which LD interprets to mean send them to the homepage.',1,'2010-11-03'),
	(2,'Localhost and Drupal Multisites','So I have set up my localhost with MAMP and I don\'t want to muck about with Dynamic DNS or constantly editing my /etc/hosts file to be able to bring down Drupal sites from multisite installations on our company servers.\r\n\r\nAt work, we run a bunch of Drupal sites out of a single Drupal code-base (aka multisites).  There are lots of domains, subdomains, etc.  There\'s no problem at work for this, we\'ve got it under control, but when I want to pull one of those sites down to my Macbook to do some playing, I have to do things a little differently.\r\n\r\nIn general, to set up multisites, you create directories like <code>sites/mysite.com</code> or <code>sites/inside.mysite.com</code>, but without any DNS modification on localhost, to do multisites, I first symlink something to my drupal root\r\n\r\n<?php\r\n$ cd ~/Sites/\r\n$ ln -s drupal-6.19 newsite\r\n?>\r\n\r\nThis will allow us to launch Drupal from http://localhost/newsite, but will pull files and settings.php from the <code>sites/default</code> directory.\r\n\r\nThen to use a different directory from <code>sites/default</code> you create a multisite folder like <code>sites/localhost.newsite</code> where your site specific settings.php, modules, themes, libraries, etc. will go.  Then my new site is available at http://localhost/newsite which is great for local development.\r\n\r\nBut if I want to bring down a copy of http://inside.mysite.com for local testing, renaming the <code>/sites/inside.mysite.com</code> directory to <code>sites/localhost.inside_mysite</code> is a pain because the system table, files table, and probably a bunch of others are expecting <code>sites/inside.mysite.com</code> in a lot of filepaths.\r\n\r\nMy savior is <a href=\"http://drupal.org/node/231298\">this core patch</a> which enables you to tell Drupal: \"I know you want to find a subsite directory called <code>sites/localhost.inside_mysite</code> since that\'s what the path on the URL is, but resist the urge and use <code>sites/inside.mysite.com</code> instead.\r\n\r\nNow, I access the site at http//localhost/inside_mysite but all of the settings and files are pulled from <code>sites/inside.mysite.com</code>.\r\n\r\nThis way, if I make changes, I can bring them back up to the server without much hassle.\r\n\r\n',1,'2010-11-10'),
	(3,'RT Owner Summary','I have two Elements that I have in $RT_HOME/local/html/Elements\r\n<ol><li>QuickSearch</li><li>OwnerSummary</li></ol>\r\n\r\nwhich serve to expand the Quick Search sidebar to include ticket owners and the number of tickets in their queues.  The list of Queues is editable and it seems to work well to keep a fairly quick view of the status of tickets that are owned.\r\n\r\nThese Elements work for me, but I haven\'t done any testing to see if they are really bullet proof for everyone.  Feel free to use and adapt as you will.\r\n',2,'2008-03-27'),
	(4,'Theming the User Login Block','I had a question posed to me about how to change the \"Request new password\" text on the User Login block, so I did a little investigation and came across a great <a href=\"http://www.lullabot.com/articles/modifying-forms-5-and-6\" title=\"Lullabot article\">article</a> by Addison Berry of Lullabot that did basically what I wanted, but only to a different form.  That, plus <a href=\"http://www.lullabot.com/articles/my-aha-moments-drupal-theming\" title=\"Aha article\">another article</a> where she details her \"Aha!\" moments in Drupal theming really pulled the whole thing together and led to a fairly simple result.\r\n\r\n<h2>The <code>user_login_block</code> function</h2>\r\n\r\nThe <a href=\"http://api.drupal.org/api/function/user_login_block/6\" title=\"link to Drupal API for user_login_block\"><code>user_login_block</code></a> function is part of the user.module and generates the form for us.  This is separate from the individual login, register, and password pages found, just the \"User Login\" block, but can be easily extended to the others as well. In reading the definition of the <code>user_login_block</code> function, the last part to be added to the form is a section of links:\r\n\r\n<?php\r\n$form[\'links\'] = array(\'#value\' => theme(\'item_list\', $items));\r\n?>\r\n\r\nThe crux of this statement is that there is an array of $items that are themed into an unordered list and given to the form to display.  The two items in the $items array turn out to be the two links for \"Create new account\" and \"Request new password\".  Specifically, the link for requesting a new password:\r\n\r\n<?php\r\n$items[] = l(t(\'Request new password\'), \'user/password\', array(\'attributes\' => array(\'title\' => t(\'Request new password via e-mail.\'))));\r\n?>\r\n\r\nThe powerful, but short-named <code>l()</code> function creates a Drupal-approved link for us.  Without any \"translations\" from other language modules, this function would produce this HTML:\r\n\r\n<?php\r\n<a href=\"/user/password\" title=\"Request new password via e-mail.\">Request new password</a>\r\n?>\r\n\r\nSo, in effect, we want to change this array item to:\r\n\r\n<?php\r\n$items[] = l(t(\'<em>Forgot how to login?</em>\'), \'user/password\', array(\'attributes\' => array(\'title\' => t(\'<em>Click to receive a new password via e-mail.</em>\'))));\r\n?>\r\n\r\nAs Addison mentions in her article, you can do this for Drupal 5 and 6 either in the theme layer or by creating a mini-module.  I am going to focus only on the Drupal 6 version for doing this in the theme layer.  There are two ways that Drupal and phptemplate allow us to prepare HTML output: functions and template files.  I think that if you\'re planning to change much of the form output, .tpl.php files are the way to go.  If you\'re only changing a little bit, for example some text as in our example, using a function seems more appropriate.  However, as with many things Drupal, you can do this either way and be successful.\r\n\r\n<h2>Registering Functions</h2>\r\n\r\nTo let Drupal know that a function exists, it must be \"registered\".  This is done with a special function named <a href=\"http://api.drupal.org/api/function/theme/6\" title=\"link to Drupal API for theme function\"><code>theme()</code></a>.  As described in the API documentation:\r\n\r\n<blockquote>All requests for theme hooks must go through this function. It examines the request and routes it to the appropriate theme function. The theme registry is checked to determine which implementation to use, which may be a function or a template.</blockquote>\r\n\r\nI have a custom theme called \"roughy\" that I\'m using so whenever you see \"roughy\" or \"roughy_\", you should change this to match the theme you\'re using.  So to register our override function, <code>user_login_block()</code>, we need to declare it within <code>roughy_theme()</code> and place that code into our template.php file.  Here\'s the syntax for registering our function:\r\n\r\n<?php\r\nfunction roughy_theme() {\r\n  return array(\r\n    \'user_login_block\' => array(\r\n      \'arguments\' => array(\'form\' => NULL),\r\n    ),\r\n  );\r\n}\r\n?>\r\n\r\nThis let\'s the theme engine know that we\'ll be expecting to override or add onto the <code>user_login_block</code> function.  Then we can actually build our function.\r\n\r\n<?php\r\nfunction roughy_user_login_block() { }\r\n?>\r\n\r\nNow, one technique is to copy/paste all of the information from the core <code>user_login_block</code> function and change what we need.  This is a good way to do it when you\'re changing a good deal of the original function.  However, since we\'re only changing a small portion, we can pass in the original form variable and just change what we need.\r\n\r\n<?php\r\nfunction roughy_user_login_block($form) { }\r\n?>\r\n\r\nOne difference between the original core function and ours is that the original returns the form object, whereas since ours is later in the process, we need to return the rendered form.\r\n\r\n<?php\r\nfunction roughy_user_login_block($form) {\r\n  return drupal_render($form);\r\n}\r\n?>\r\n\r\nHowever, before we return the form, we need to change our text.\r\n\r\n<?php\r\nfunction roughy_user_login_block($form) {\r\n  $items = array();\r\n  if (variable_get(\'user_register\', 1)) {\r\n    $items[] = l(t(\'Create new account\'), \'user/register\', array(\'attributes\' => array(\'title\' => t(\'Create a new user account.\'))));\r\n  }\r\n  $items[] = l(t(\'Forgot how to login?\'), \'user/password\', array(\'attributes\' => array(\'title\' => t(\'Click to receive a new password via e-mail.\'))));\r\n\r\n  $form[\'links\'] = array(\'#value\' => theme(\'item_list\', $items));\r\n\r\n  return drupal_render($form);\r\n} \r\n?>\r\n\r\nOnce this is in place, we need to clear the \"theme registry\".  This can be done by clearing the caches which can be found under admin/settings/performance or is easily done through the Devel module.\r\n\r\n<h2>Et Voila</h2>\r\n\r\nThis should be all the changes that are necessary to change the user login block text.  You can use this same technique to change the labels for the username or password fields or the value of the submit input element.  Next time we\'ll tackle changing the text on user/pass to give the user more information about what\'s going to happen.  Stay tuned.',1,'2009-09-27'),
	(5,'My birthday present -- Sept 2','<p>I got one of the coolest presents this year.  My brother gave me:</p>\r\n<ul style=\"list-style-type: none;\">\r\n  <li><a href=\"/sites/eporama.com/files/pictures.png\"><img src=\"/sites/eporama.com/files/pictures.png\" width=\"90\" height=\"120\" alt=\"two photographs\" border=\"1\"  style=\"border:1px solid black;\"/></a></li>\r\n  <li><a href=\"/sites/eporama.com/files/note.png\"><img src=\"/sites/eporama.com/files/note.png\" width=\"90\" height=\"120\" alt=\"a hand-scrawled piece of paper\"  style=\"border:1px solid black;\"/></a></li>\r\n  <li> and a locked box without a key</li>\r\n</ul>\r\n\r\n<em>A Treasure Hunt!</em>\r\n<p>&nbsp;</p>\r\n\r\nI recognized the lower picture in the photos as a section of the bookcase in our living room.  I also noticed the dictionary.  That rang bells because for Christmas, Carl had given me a very similar dictionary with no explanation as to why, but with the following inscription: \"This is one of those books that will come in handy someday.  Don\'t lose it.  Make sure you can find it easily when the time comes.\"  Now, I knew that I had taken that particular dictionary to work with me to make sure I knew where it was, so I didn\'t know if there was a new one at my house or if he had gotten it from my office somehow.\r\n\r\nSo I was prepared to wait and go home to inspect the dictionary to see if there were any clues to be found.  But staring at the hand written note, I noticed something about <a href=\"/sites/eporama.com/files/letterhead.png\">the letterhead</a>.  I thought to myself, \"New Hampshire zip codes don\'t start with 012\".  Wait, 01234 ?!?  not a chance.  So the whole thing was bogus, but could it be a clue?  Well, finally it hit that \"Ritt N Whithen, Visible, Inc.\" is pronounced \"written with invisible ink\".\r\n\r\nI remember writing secret messages as a kid in <a href=\"http://www.kidzworld.com/article/3844-making-invisible-ink-appear\">lemon juice</a> that could be read when the paper was heated. So I took the paper in to the stove and carefully held it over a burner.  Had to make sure I kept it from actually catching on fire, but I was able to finally make out <a href=\"/sites/eporama.com/files/address.png\">characters at near the top</a>.\r\n\r\nIt was an email address: \"wickedsmaht123@yahoo.com\".  So I sent a message to that address and voila, I received an <a href=\"/sites/eporama.com/files/code.png\">automated response email</a>.  Yippee!\r\n\r\nNow I had something to use the dictionary for...\r\n\r\nSo, once I got home and got the dictionary, I looked up each word.  None were marked or special in anyway, but I remember more than one story where the code was based on the page numbers of the words.  (Turns out that <a href=\"http://search.barnesandnoble.com/Clear-and-Present-Danger/Tom-Clancy/e/9780425122129/?itm=1\"><i>Clear and Present Danger<i></a> is one such story and it turns out this trick is how Admiral Cutter betrays the heros to Felix Cortez...)\r\n\r\nSo, I got the following sequence: 42 37 43 70 55 14\r\n\r\nNow a couple of years ago, I had given Carl a Christmas present of tickets to Blue Man Group where I had given him four clues that when put together made the IP address of the BMG web site, so I immediately started looking for patters that way.  But somehow what caught my eye was that I know (don\'t ask why) that our latitude and longitude in MA is 42, -70.  So I used google maps to pinpoint 42.3743, -70.5514, but that was <a href=\"http://maps.google.com/maps?f=q&hl=en&geocode=&q=42.3743,+-70.5514&ie=UTF8&ll=42.374778,-70.551453&spn=1.586703,3.188782&z=9&iwloc=addr\">in the middle of the ocean</a>...\r\n\r\nBut lat/long is often given in a triplet of degrees/minutes/seconds.  I didn\'t realize that you can just dump six numbers into the search box of google maps and it\'ll treat them that way, so I found an online converter between DMS and decimal lat/long, and arrived at 42.628611, -70.92056.\r\nWhen putting those numbers into a GMap URL, you get a <a href=\"http://maps.google.com/maps?ie=UTF8&ll=42.628611,-70.92056&spn=0.012346,0.024912&t=h&z=16\">nice picture</a>, but no pinpointed location.\r\n\r\nSo I zoomed in, I zoomed out, I panned and searched.  This is what I determined: The location was in Ipswich, MA; this fit the pattern because he canoes quite frequently on the Ipswich river; the location was fairly close to the Ipswich River.  Maybe I needed to grab one of my parents\' single kayaks and follow the path.  But since it was 10:30pm at the time, I decided to keep investigating and get the kayak in the morning.\r\n\r\nTrying to remember where the put-ins/take-outs were for that area, I stumbled across a <a href=\"http://www321.pair.com/oaries/localattitude/ipswichriver.htm\">Boston.com</a> article about canoeing on the Ipswich River which had the following setences:\r\n\r\n<blockquote>The next formal stop can be Audubon\'s Ipswich River Wildlife Sanctuary, with its more open landscape and wetlands. It is further up and it will take another couple of hours to reach the canoe landing near the Sanctuary headquarters.</blockquote>\r\n\r\nI hadn\'t remembered the Sanctuary was there.  So I looked up the <a href=\"http://www.massaudubon.org/Nature_Connection/Sanctuaries/Ipswich_River/\">Audubon Sanctuary</a>. And it was definitely that big building visible on the map.  So some more poking on their website and I found a <a href=\"http://www.massaudubon.org/Nature_Connection/Sanctuaries/images/maps/ipswich_trails.gif\">map</a> that showed some helpful landmarks.  I lined up the google map and the trail map but it was still a bit vague.  I needed that pinpoint location.  So I reverted to type and made <a href=\"http://house.elementalmarkup.com/bday.html\">my own map</a> which put the point right where it needed to be.\r\n\r\nI lined the two maps up together in my mind as best as I could.  It seemed as though the point was very close to the \"Observation Tower\" on the map!  And the <a href=\"/sites/eporama.com/files/pictures.png\">first picture</a> could certainly be a set of stairs leading up to an observation tower. At last, with a destination to investigate, I decided to go to bed.\r\n\r\n<a href=\"/ramblings/my-birthday-present-sept-3\">To Be Continued...</a>',1,'2008-09-05'),
	(6,'My birthday present -- Sept 3','So on my actual birthday, I thought briefly of going on my quest before work, leaving at 5:30am or so.  But fate, tiredness, and kids who needed to get ready for the first day of school put a damper on those plans.  So I remained patient and waited until my important meetings were over at work and decided that on my birthday, I could leave a little early. At 3pm, I left for Ipswich.  It was a beautiful day to be on the road with the windows down and the country music playing.\r\n\r\nOnce I got up to the Sanctuary, I went inside to sign the log book and make sure that what I thought was the path to the Observation Tower really was.  With my pictures in hand, I set off to see what I could find.\r\n\r\nThe first thing I found was the Observation Tower!  And <a href=\"/sites/eporama.com/files/stairs.jpg\">the stairs</a> were familiar.  In fact, <a href=\"/sites/eporama.com/files/compare.jpg\">they were a match!</a>.  After hunting around for a bit, I crawled under and found a plastic bag seriously taped to the underside of the stair runner.  It looked like it was put there to stay.  But I removed it.  And what do you think I found inside?  Well, <a href=\"/sites/eporama.com/files/withkey.jpg\">a key</a>, of course!\r\n\r\nSo, I took the key back to my car and much to my horror, it didn\'t open the box. Turns out this was a known problem and Carl had tried to make it up to Ipswich to replace the key with one that would work, but hadn\'t been able to beat me to it...  So I called him and we agreed to swap keys and pretend it never happened.\r\n\r\nOnce I got back to Lexington to make the swap, I opened the locked box.  &quot;What was my present?&quot; I hear you ask.  Well, turns out that the contents of the box was a plastic bag filled with strips of a piece of paper that had been run through the shredder.  Luckily for me, a fairly generous non-cross-cut shredder that left me with 2 dozen 1/4\" wide pieces of paper.  Once I reassembled it, I found the following clue:\r\n\r\n<blockquote style=\"text-align:center;width:20em;\">If you are WickedSmaht123, the password you need to find the treasure, is the full name of George Bailey\'s Guardian Angel!!!</blockquote>\r\n\r\nWell, I knew that George\'s Guardian Angel was named Clarence, but I couldn\'t remember his whole name.  Luckily, I received a DVD of <i>It\'s a Wonderful Life</i> last Christmas (hmmm... Coincidence?) so I popped it in and fast forwarded to the scene in the gate house after George had jumped in to save Clarence (who was saving George by jumping in to force a rescue).\r\n\r\n<blockquote>&quot;What\'s your name, anyway?&quot;</blockquote>\r\n\r\n<blockquote>&quot;Clarence Oddbody, AS2&quot;</blockquote>\r\n\r\n<blockquote>&quot;What\'s AS2?&quot;</blockquote>\r\n\r\n<blockquote>&quot;Angel, Second Class&quot;</blockquote>\r\n\r\nLogging onto Yahoo mail, I was able to get into the email account (don\'t worry, I later changed the password).  And there was <a href=\"/sites/eporama.com/files/yahoo.png\">an unread email</a> just begging to be opened.  The email was as brief as it was confusing.\r\n\r\n<blockquote>Tell the Oracle, a user on Leeuwenhoek the game computer, the not so creative name Jack Sparrow gave at the end of the world, to the old geezer who lost both his arms and part of his eyes.  Then you will know where the treasure lies.</blockquote>\r\n\r\nWell, I at least had a starting point for the second half of the message.  But I had to get a hold of <a href=\"http://us.imdb.com/title/tt0449088/\">the last Pirates of the Caribbean</a> movie.  I was hoping that iTunes would have it to rent, but they only have it for purchase.  Then I hoped that Comcast might have it for rental in OnDemand, but alas, they only had Speed Racer.\r\n\r\nSo I was waiting another day...\r\n\r\n<a href=\"/ramblings/my-birthday-present-sept-6\">To be concluded...</a>',2,'2008-09-06'),
	(7,'My birthday present -- Sept 6','I remembered in the morning that my father had at least one if not all of the Pirates of the Caribbean movies on DVD. So off to my parents house to raid the movie Library.  While there, I got the second and third Pirates movies, the second Matrix movie (just in case there was something about the Oracle from the Matrix) and just for good measure, a new Dilbert book.\r\n\r\nI watched the third Pirates movie first because it was \"At the End of the World\" and about half way through got to this dialog:\r\n\r\n<blockquote>Gibbs: Look sharp, men. It\'s not for naught that this be called Shipwreck Island, on which is found Shipwreck Cove and the town of Shipwreck!</blockquote>\r\n<blockquote>Jack Sparrow: You know, for all that pirates are clever cobs, we are a very unimaginative lot when it comes to naming things. I once sailed with a geezer; lost both his arms and part of his eye.</blockquote>\r\n<blockquote>Gibbs: What\'ya call \'im?</blockquote>\r\n<blockquote>Jack Sparrow: ... Larry.</blockquote>\r\n\r\nSo now I had to tell the Oracle: &quot;Larry&quot;.  But who or what was &quot;the Oracle&quot;?  And <em>Leeuwenhoek</em>?!?  How does a <a href=\"http://en.wikipedia.org/wiki/Antonie_van_Leeuwenhoek\">16th century, Dutch scientist</a> have a game computer that would involve an Oracle?\r\n\r\nWell, this was the most thought provoking part of the puzzle so far.  I ranged up and down on the terms: \"Oracle\", \"Leeuwenhoek\", and \"Larry\" and went so far as to wonder about Larry Ellison from Oracle Corp.; Whether Leeuwenhoek was an anagram for something; whether my brother had worked his way through <a href=\"http://www.civ3.com/\">Civilization III</a> far enough to have gotten the 16th Century Dutch involved...\r\n\r\nSo I started thinking a bit more obtusely.  Leeuwenhoek made many microscopes and is sometimes considered the \"Father of Microbiology\".  My mom has a Master\'s in microbiology, but I\'m not supposed to ask anyone for hints.  But maybe my mom <em>is</em> the Oracle and I\'m supposed to say the word \"Larry\" to her to get a specific response.  Or maybe it\'s her computer.\r\n\r\nSo on a trip to Costco, I detoured to my parents\' house.  My mom was out shopping, so I couldn\'t inquire as to Larry, but I decided to look on her computer which was sitting in the dining room.  My dad reminded me that touching mom\'s computer was taking my own life into my hands, but I told him I\'d be careful and he could watch what I did.  He declined, saying that this would only put both of our lives into my hands...\r\n\r\nLuckily, when I pulled up the login window for my mom\'s computer, there was a user: \"Oracle, The\".  I logged on with \"Larry\" as a password and then found out that my mom had renamed her hard drive: \"Leeuwenhoek\"!  But more importantly, there was a rather prominent picture set as the <a href=\"/sites/eporama.com/files/leeuwenhoek.png\">desktop background</a>.\r\n\r\nWell, this was another bookcase in my own house, so I went to Costco and then back home.  The book in question was in our living room and when extracting it, I found <a href=\"/sites/eporama.com/files/amc.png\">another clue</a>.\r\n\r\nSo now all that\'s left to solve is: which movie are we gonna see?\r\n\r\nThat, and how do I repay the favor ;-)\r\n\r\n',1,'2008-09-08'),
	(8,'Moving from sites/all','Recently, we have been moving away from using <code>sites/all</code> to store modules and themes because we heavily use multisite setups and need to keep the sites contained and independent.\r\n\r\nTo change a site away from using <code>sites/all</code>, I djinn\'ed up a drush command that looks to see what\'s being invoked from <code>sites/all</code>.\r\n\r\n<code>\r\ndrush sql-query \"select filename from system where status=1 and filename like \'sites/all%\'\"\r\n</code>\r\n\r\nwhich will give a return delimited list of the filenames of modules that are enabled:\r\n\r\n<code>sites/all/modules/cck/content.module\r\nsites/all/modules/cck/modules/text/text.module\r\nsites/all/modules/date/date/date.module\r\nsites/all/modules/date/date_api.module\r\nsites/all/modules/date/date_popup/date_popup.module\r\nsites/all/modules/date/date_timezone/date_timezone.module\r\nsites/all/modules/devel/devel_generate.module\r\nsites/all/modules/devel/devel.module\r\nsites/all/modules/admin_menu/admin_menu.module\r\n</code>\r\n\r\nFrom this we can see that CCK, Date, Devel, and Admin Menu are the Drupal projects that need to be downloaded into the subsite directory.\r\n\r\nWe really just need to get the arg(3) to know which projects to grab. I did this with awk and then changed the newlines to spaces to get a space delimited set of values to pass to <code>drush dl</code>\r\n\r\n<code>\r\ndrush sql-query \"select filename from system where status=1 and filename like \'sites/all%\'\" | awk -F/ \'{print $4}\' | sort -u | tr \'\\n\' \' \'\r\n</code>\r\n\r\nThis leaves us with the following:\r\n\r\n<code> admin_menu cck date devel</code>\r\n\r\nA nice space delimited set of projects to download.\r\n\r\n<code>\r\ndrush dl `drush sql-query \"select filename from system where status=1 and filename like \'sites/all%\'\" | awk -F/ \'{print $4}\' | sort -u | tr \'\\n\' \' \'`\r\n</code>\r\n\r\nwhich when run in the subsite directory (or with a site alias or uri parameter to drush) will get all of the projects necessary. Then simply running \r\n\r\n<code>\r\ndrush cc all\r\n</code>\r\n\r\nseems to do the trick.',1,'2011-05-23'),
	(9,'How I update Drupal core','When <a href=\"http://drupal.org/node/1168756\">new security releases</a> come out for Drupal, updating is definitely something that you want to do sooner rather than later. My philosophy has generally been to update my local setup immediately, let all of our developers/users know that I am going to update the shared dev server within two days, then schedule a time to update production based on any issues we find with the dev server. Since we run most of our sites as a rather large multisite, it means updating everybody at once, but hey, that\'s what dev\'s for, right? Well, we\'ll leave that for another discussion.\r\n<!--break-->\r\nSince last night, Drupal 6.21 and Drupal 6.22 were released, I have updated a couple of machines and been asked to help with some more, so I thought it might be nice to have this written down somewhere.\r\n\r\nThe general way I setup Drupal sites is to download Drupal into a version specific directory (eg., drupal-6.20 and drupal-6.22) and the point a generic symlink named \"drupal\" at the version I want to be current. Then I can set my apache conf (or cpanel or whatever) so that the websites are being driven out of the \"drupal\" folder. This allows the upgrade process to happen with some fairly straight forward rollback ability if things don\'t work. And we never have to start/stop apache or reconfigure the conf files.\r\n\r\nSo my directory looks like: \r\n\r\n<code>\r\nlrwxrwxrwx drupal -> drupal-6.20\r\ndrwxr-xr-x drupal-6.20\r\n</code>\r\n\r\n(that\'s well stripped down, but hopefully you get the idea).\r\n\r\nThe basic outline of what I do is to:\r\n<ol><li>download the new version of Drupal</li>\r\n<li>backup all of our databases</li>\r\n<li>move the <code>sites</code> directory from the existing drupal-6.20 to the new version</li>\r\n<li>delete the symlink and repoint it at the new version</li>\r\n<li>run <code>update.php</code> on each site in the new multisite</li>\r\n<li>clear caches</li>\r\n</ol>\r\n\r\nThe first thing I do is to download the new version next to the existing version, not overwriting:\r\n\r\n<code>\r\ndrush dl drupal-6.22 --drupal-project-rename=drupal-6.22\r\n</code>\r\n\r\nThe <code>drupal-project-rename</code> parameter is necessary because drush wants to rename the folder <code>drupal</code> by default.\r\n\r\nSo now our directory looks like this:\r\n\r\n<code>\r\nlrwxrwxrwx drupal -> drupal-6.20\r\ndrwxr-xr-x drupal-6.20\r\ndrwxr-xr-x drupal-6.22\r\n</code>\r\n\r\nAnd of course, to be safe, we backup our databases. If you have a working drush setup, you can easily run the following:\r\n\r\n<code>\r\ndrush @sites sql-dump --root=/path/to/drupal --yes --result-file=/path/to/your/drush-dumps/@DATABASE_@DATE.sql\r\n</code>\r\n\r\nIf you have a good place to put sql dump files and know the full path to your Drupal root, drush will go through and dump each file.\r\n\r\nNext, we want to move the existing <code>sites</code> directory to the new version, but we have to get the new, but empty sites directory out of the way.\r\n\r\n<code>\r\nrm -rf drupal-6.22/sites; mv drupal/sites drupal-6.22\r\n</code>\r\n\r\nAnd remove and repoint the symlink for drupal\r\n\r\n<code>\r\nrm -f drupal; ln -s drupal-6.22 drupal\r\n</code>\r\n\r\nAs of this point, all of our sites are running on Drupal-6.22. However, if the new version has database changes (as 6.22 did) we need to run update.php on all of the sites.  I also tend to clear cache here just because...  Luckily, drush makes this easy as well.\r\n\r\n<code>\r\ndrush @sites updb --root=/path/to/drupal --yes\r\ndrush @sites cc all --root=/path/to/drupal --yes\r\n</code>\r\n\r\nIf all goes well, we can do the same on dev and then on production. The key here is that if something does go wrong, you can basically reverse the process, put the <code>sites</code> folder back into drupal-6.20, run <code>drush sql-cli < /path/to/that/dump/we/made.sql</code> and repoint the symlink back to the original folder.\r\n\r\nIf you\'re extra careful, you might even throw in the whole process of turning the site offline, disabling all of your contrib modules, etc. but so far, *fingers crossed*, I haven\'t needed to do that for minor version upgrades. Or if I do, I find that out on my local machine before blowing up a production system.\r\n\r\n<code>drush @sites vset site_offline 1 --yes; drush @sites vset site_offline_message \"We\'re upgrading Drupal, be right back.\"</code>\r\n\r\nBut remember to turn them back on ;-) <code>drush @sites vset site_offline 0 --yes</code>\r\n\r\nMy next approach will be integrating git into this whole process...  git pull, git checkout 6.22, drush @sites updb...  But not yet.  Soon, but not yet.\r\n\r\n',3,'2011-05-26'),
	(10,'Updating Drupal Core without command-line tools','(No drush!?!? #inconceivable)\r\n\r\nWith all of the fancy ways to upgrade Drupal core floating around: drush, git, diff, patching. What if you only have FTP?\r\n\r\nAs always, the first steps are to a) plan, b) backup, and c) be flexible.\r\n\r\nIt always helps to have a plan. Write it down, think it through, practice on something other than your production site.\r\n\r\nThe basics for updating a Drupal minor version (eg., 6.20 to 6.22) are that you need to save your /sites folder and anything that you\'ve made changes to outside of the /sites folder. Usually those changes might be to .htaccess or robots.txt. If you\'ve made any changes to core files, hopefully you\'ve done so systematically taking notes so that you can try to recreate those changes. Or even better that you created a patch file or have things under some sort of version control, but we\'re assuming low tech.\r\n\r\nIf you\'re moving files about by FTP, a reasonable process might be to download the <code>/sites</code> directory to your local machine. Then download the new version of Drupal locally and unpack it. Get rid of the <code>/sites</code> directory that came with the new version and drop in the recently downloaded copy of your old <code>/sites</code> directory. Now, upload the whole new directory to a separate location on your FTP server. Hopefully in the same parent folder that your existing Drupal site is served from, but with a different name. For example, if your directory structure looks like <code>/home/username/public_html/drupal</code>, you can upload to <code>/home/username/public_html/drupal-6.22</code>. \r\n\r\nThen rename the <code>drupal</code> directory to <code>drupal-6.20</code> and the <code>drupal-6.22</code> directory to <code>drupal</code>. Now your webserver will be looking at the new files instead of the old ones.\r\n\r\nNext backup your database and then visit update.php on your site, following all of the instructions to perform any database alterations.\r\n\r\nThis should be all of the steps necessary for one or two jump minor upgrades. Going from Drupal-6.4 to Drupal-6.22 might take a little more effort.\r\n\r\nAlso, some errors, quirks may be due to contrib modules acting differently with different versions of core. Most contrib modules try to keep updated to work with the latest core, so updating contrib modules at this point would probably be a good idea.\r\n\r\nThe benefit of this approach is that you don\'t have a lot of downtime while files are being uploaded. Also, you can moderately easily restore to the older version by renaming the folders again in reverse (drupal becomes drupal-6.22 and drupal-6.20 becomes drupal) and then restoring the database from the backup you made.\r\n\r\nThe official documentation recommends setting the site offline, disabling all contrib modules, setting the theme to Garland, performing the update, then reenabling modules, setting your theme back, testing thoroughly and then putting the site back online. The general consensus that I\'ve seen in IRC, forums and blogs is that this is unnecessary for most installations. Perhaps if you have tremendous amounts of traffic or very complex sites you should consider these more detailed solutions. However, if you have that much traffic or very complex sites then command line tools and development, staging, and production deployment workflows are probably just as important.\r\n\r\nHowever, having a separate copy of the site to practice on is invaluable and should be the first thing that anyone does for a site that they can\'t afford to have unavailable for a while.',1,'2011-05-28'),
	(11,'Setting up a Mac development environment','There are many ways to get Drupal running on your Mac. OS X comes preinstalled with PHP and Apache, so theoretically, you\'d only need MySQL. Acquia makes a separate version that includes Drupal, Apache, MySQL, and PHP (aka DAMP) already set up. This version is great if you really want to get up and running quickly. It\'s tied to the Acquia distribution of Drupal which has some extra features that we don\'t tend to use for our development.\r\n\r\nWhat I\'ve found a reasonable compromise has been to use MAMP (a Mac application that provides - Apache, MySQL, PHP) and customize my own Drupal installation. This allows me to approximate our dev/production systems reasonably closely.\r\n\r\n<h2>Download MAMP</h2>\r\nhttp://mamp.info/downloads/releases/MAMP_PRO.dmg.zip\r\nYou don\'t need the PRO version, but the way MAMP works is to download this one and then not choose the PRO setup. Once installed, I make the following changes to the system right away:\r\n\r\nIn the preferences:\r\n<ul><li>Start and stop the applications on open/quit\r\n<li>don\'t have MAMP \"Open the start page at startup\"\r\n<li>set Apache to port 80\r\n<li>set PHP to 5.2.16 (or whatever matches current dev/prod php)\r\n<li>set Apache doc root to /Users/yourusername/Sites/ (mine is set to \"/Users/erikp/Sites/\")\r\n</ul>\r\n\r\nWhen setting Apache to port 80, you\'ll need to provide an admin user/password to use a port below 1024, but it\'s worth it not to have to add :8888 to all of your URLs.\r\n\r\nI, personally, chose not to open the MAMP start page because I\'m not using the MAMP version of PHPMyAdmin, so there are no MAMP UI tools that I use. I use <a href=\"http://sequelpro.com\" title=\"link to SequelPro website\">Sequel Pro</a> to manage all of my MySQL servers and databases.\r\n\r\nNow you should be able to visit http://localhost and see the Apple \"Your website\" page which is from /Users/yourusername/Sites/index.html\r\n\r\nTo be able to run mysql and mysqladmin from the command-line without having to specify their full paths within the Applications/MAMP directory, open the .bash_profile file in your home directory. If you don\'t have a .bash_profile, you can open TextEdit and paste the following into the window and then saving as .bash_profile. If you do have a .bash_profile and need to open it in TextEdit, try opening Terminal from the Utilities folder and typing <code>open -a TextEdit ~/.bash_profile</code>\r\n\r\nOnce the file is open, you should copy in the following: \r\n\r\n<code>\r\nexport PATH=/Applications/MAMP/bin/php5.2/bin:/Applications/MAMP/Library/bin:$PATH\r\n</code>\r\n\r\nThis will allow you to run Drush commands which need command line PHP and mysql applications which are in /Applications/MAMP/Library/bin/.  We\'ll be editing the .bash_profile again, so remember how to get to it.\r\n\r\n<h2>Download Drush<h2>\r\n\r\nThe current version can always be found at http://drupal.org/project/drush\r\nYou don\'t need to get a Drupal core version specific, the latest Drush will always work with all Drupal versions.\r\n\r\nUnpack it. Move the unpacked drush directory either somewhere in your $PATH or add it to your $PATH. I moved drush into ~/.drush \r\n\r\n<code>\r\ntar xfz drush-7.x-4.4.tar.gz;\r\nmv drush ~/.drush\r\n</code>\r\n\r\nThen add the following line to your .bash_profile:\r\n\r\n<code>\r\nalias drush=\'$HOME/.drush/drush\';\r\n</code>\r\n\r\nWhen you modify .bash_profile, you either need to logout and then back in again to take advantage of the changes or you can type the following on a Terminal command line:\r\n\r\n<code>\r\nsource ~/.bash_profile\r\n</code>\r\n\r\nNow you should be able to type the command \"drush\" and get something akin to the following (probably with a lot more stuff):\r\n\r\n<code>\r\n$ ./drush\r\nExecute a drush command. Run `drush help [command]` to view command-specific help.  Run `drush topic` to read even more\r\ndocumentation.\r\n\r\nGlobal options (see `drush topic core-global-options` for the full list):\r\n -r <path>, --root=<path>                  Drupal root directory to use (default: current directory)             \r\n -l http://example.com,                    URI of the drupal site to use (only needed in multisite environments) \r\n --uri=http://example.com                                                                                        \r\n...\r\n</code>\r\n\r\n<h2>Download Drupal</h2>\r\n\r\nSo great, drush works, now we need to use it to get a copy of the Drupal code.\r\n\r\n<code>\r\ncd ~/Sites\r\ndrush dl drupal\r\n</code>\r\n\r\nNow, you should be able to call up the webpage: http://localhost/drupal to start the install process.\r\n\r\nOne of the first stumbling blocks will be that you need to create a settings.php file. Drupal doesn\'t do this for you.\r\n\r\n<code>\r\ncd ~/Sites/drupal/sites/default\r\ncp default.settings.php settings.php\r\n</code>\r\n\r\nThe second thing will be to create a database to hold our new site. Since we added /Applications/MAMP/Library/bin to our $PATH, we can call \"mysqladmin\" directly.\r\n\r\n<code>\r\nmysqladmin -u root -p create drupal_default\r\n</code>\r\n\r\nThis will prompt you for your root MySQL password, which by default in MAMP is \"root\".\r\n\r\nNow return to the Drupal installer UI on your website and put in:\r\n\r\nDatabase name: drupal_default\r\nDatabase username: root\r\nDatabase password: root (unless you changed it ;-)\r\n\r\nLet the process run and you\'re on your way to having a local Drupal installation.\r\n\r\nNext up: <a href=\"run-multiple-drupal-sites-easily\">Repeating the process to run multiple sites easily</a>.',2,'2011-05-29'),
	(12,'Run multiple Drupal sites easily','Once you\'ve <a href=\"/ramblings/setting-mac-development-environment\">set up a development environment</a>, probably the next thing that you\'ve run into is that you\'re hooked and you need another (and another, and another...).\r\n\r\nDrupal can easily handle multiple sites run out of the same Drupal codebase. <a href=\"http://drupal.org/getting-started/6/install/multi-site\">Drupal multisites</a> are super powerful and if you\'re not hacking core are pretty easy way to keep things a little more centralized. Some folks use multisites only when the individual subsites have common database elements, or tasks, or owners, etc. Especially on a local development machine, I tend to run everything in one main Drupal codebase. For me, it makes tasks like Drush aliases, moving sites, configuring backups, running cron, etc. a little easier.\r\n\r\nI <a href=\"localhost-and-drupal-multisites\">used to set up localhost multisites</a> with symlinks and accessing them via urls like: http://localhost/mysubsite. But the problem was that very very rarely did I have a site that was going to be run in the real world in a subdirectory. Usually the finaly URL was going to be http://mysubsite.dev instead. Drupal handles this pretty well, but especially if you ever have to manually enter a path to an img or something, you\'re in for trouble.\r\n\r\n<h2>Local DNS</h2>\r\n\r\nThe key would be to be able to have my own domain names pointed locally. For example so that *.dev points to localhost. Turns out that this is easy on most Linux based servers, but not on Mac OS X. To have wildcards, you need to run a local DNS server. I started down that route and decided that with being sometimes on a corporate LAN and sometimes at home, it really wasn\'t easy for me to get it right.\r\n\r\nSo I turned to <code>/etc/hosts</code>. You can easily add fake (or real) domain names to <code>/etc/hosts</code>. Simply map <code>127.0.0.1</code> which is the IP address for localhost to any domain you\'d like.\r\n\r\n<code>\r\n127.0.0.1  mysubsite.dev\r\n</code>\r\n\r\nNow you can visit http://mysubsite.dev and it should pull up the same as http://localhost\r\n\r\n<h2>Modifying Apache</h2>\r\n\r\nSo to have Apache serve your local ~/Sites/drupal folder whenever the domain ends in .dev, you can use Apache NameVirtualHost commands. Add the following to your /Applications/MAMP/conf/apache/httpd.conf file (backing up the original of course):\r\n\r\n<code>\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n  DocumentRoot /Users/username/Sites\r\n  ServerName localhost\r\n</VirtualHost>\r\n\r\n<VirtualHost *:80>\r\n  DocumentRoot /Users/username/Sites/drupal\r\n  ServerName drupal.dev\r\n  ServerAlias *.dev\r\n</VirtualHost>\r\n</code>\r\n\r\n<h2>Setup Multisite</h2>\r\n\r\nNow you need to create a new <code>/sites/</code> subdirectory for your site:\r\n\r\n<code>\r\ncd ~/Sites/drupal/sites\r\nmkdir mysubsite.dev\r\ncp default/default.settings.php settings.php\r\n</code>\r\n\r\nNow with a single line added to /etc/hosts and a new directory in ~/Sites/drupal/sites with its own settings.php file, you can have another new Drupal site.\r\n\r\nNext: <a href=\"/ramblings/rectifying-mysubsitedev-vs-mysubsitecom-dilemma\">Rectifying the mysubsite.dev vs. mysubsite.com dilemma</a>\r\n',1,'2011-05-29'),
	(13,'Rectifying the mysubsite.dev vs. mysubsite.com dilemma','Drupal multisites are really powerful and a nice way to not have to have all of the core files duplicated for each site that you\'re working on on a development or local server.\r\n\r\nDrupal looks for settings.php in a number of places. The more exact of a match that it can find to your sites URL, the better. If your site\'s address is <code>fun.mywonderfulsite.com</code> the most specific <code>sites/</code> directory that Drupal will look for is: <code>sites/fun.mywonderfulsite.com</code>.  Then it will start working its way backward through the domain to find a match <code>sites/mywonderfulsite.com</code>. If it can\'t find a match, it will use the <code>sites/default</code> directory that comes shipped with Drupal.\r\n\r\nHaving found a valid <code>settings.php</code> file, Drupal will look in the same folder for modules and themes. It will also look in <code>sites/all</code> and in the core <code>modules</code> or <code>themes</code> directories.  Again, if the module/theme is duplicated, Drupal will use one found in the more specific directory.\r\n\r\nThe <code>sites/fun.mywonderfulsite.com/files</code> directory is also typically where Drupal stores many uploaded and user contributed files. So this path is often included in settings and variables in the database. For this reason, transferring settings and content from local to development to production, it is very helpful if we can use the <em>same</em> directory on all of our machines.\r\n\r\nThe problem is that <a href=\"run-multiple-drupal-sites-easily\">our setup</a> is running from <code>http://mysubsite.dev </code> but the \"development\" and \"production\" sites will be at <code>http://dev.mysubsite.com </code> and <code>http://www.mysubsite.com </code> respectively. Now, Drupal can handle serving both <code>dev.</code> and <code>www.</code> from <code>sites/mysubsite.com</code>, you can\'t server a different <abbr title=\"Top Level Domain\">TLD</abbr> from the same directory.\r\n\r\nTo bypass Drupal\'s automatic multisite detection and to suggest a directory to be used, we turn to a <a href=\"http://drupal.org/node/231298#comment-3833390\">small core patch for Drupal 6</a> that was wonderful enough to be included in Drupal 7 core. You can use <a href=\"http://drupal.org/files/issues/d-6.20-directory-alias.patch\">the uploaded patch</a> to create your own mappings.\r\n\r\n<code>\r\ncd ~/Sites/drupal\r\nwget http://drupal.org/files/issues/d-6.20-directory-alias.patch\r\npatch -p0 < d-6.20-directory-alias.patch\r\n</code>\r\n\r\nThis changes one Drupal core file and adds a new file <code>example.sites.php</code> in the <code>sites</code> directory. To use the new functionality, simply copy the <code>example.sites.php</code> file to <code>sites.php</code> and edit it. There\'s a lot of detailed explanation and documentation within the file, but the guts of it are at the bottom commented out and ready for our changes. Change the following code:\r\n\r\n<code>\r\n#$sites = array(\r\n#  \'devexample.com\' => \'example.com\',\r\n#  \'localhost.example\' => \'example.com\',\r\n#);\r\n</code>\r\n\r\nto be uncommented and map our existing url to the sites directory that we would prefer:\r\n\r\n<code>\r\n$sites = array(\r\n  \'mysubsite.dev\' => \'mysubsite.com\',\r\n);\r\n</code>\r\n\r\nNow, Drupal will serve up <code>http://mysubsite.dev </code> from the <code>sites/mysubsite.com </code> directory so that all paths and configuration variables will be set the same way we need to have them on production.\r\n\r\nNext: Keeping sites under control',1,'2011-06-06'),
	(14,'Drush aliases','I\'m trying to get a better handle on Drush aliases, so figured it would help to write out my findings and thoughts. This post may update as we go, so look back for changes.\r\n\r\n<h2>Drush context</h2>\r\n\r\nDrush runs in specific contexts, if Drush can tell that it\'s in a Drupal root somewhere, it will assume the <code>--root=/path/to/that/Drupal</code>. It can also detect if you\'re within a <code>sites/subsite</code> directory and will set <code>--uri=subsite</code> as well. This is very handy as I am often doing other command line tasks in the terminal window, so if I\'m already in a specific location, Drush will assume that location as the context.\r\n\r\n<code>\r\ncd ~/Sites/drupal/sites/subsite.vmdev\r\ndrush status\r\n</code>\r\n\r\nis equivalent to:\r\n\r\n<code>\r\ndrush --root=~/Sites/drupal --uri=subsite.vmdev status\r\n</code>\r\n\r\nNot much savings, but when you have to clear caches, run cron, check watchdog entries multiple times, it\'s nice not to have to add those all the time.\r\n\r\n<h2>Drush Aliases</h2>\r\n\r\nThe other way of setting context is with Drush aliases. In the <code>examples</code> directory, there is an <code>example.aliases.drushrc.php</code> file. Copy this file either to the <code>.drush</code> directory in your home directory or to the same directory where the <code>drush</code> script lives. There are a couple of other places that Drush will automatically search for alias files and they\'re documented in <code>example.aliases.drushrc.php</code>.\r\n\r\nTo begin with, rename the copied file to <code>aliases.drushrc.php</code>. There are other naming patterns that you can use, but we\'ll get to those later.\r\n\r\nA basic drush alias is an associative array that defines all the necessary properties of the site that you\'re going to try to alias.\r\n\r\nLet\'s make an example alias to our <code>subsite.vmdev</code> site which is on my local machine and in the main Drupal multisite. To define an alias, you create a keyed item in the $aliases array. The key should be what you would like to call the alias. In our case, <code>subsite</code>.\r\n\r\n<?php\r\n$aliases[\'subsite\'] = array(\r\n  // definition will go here.\r\n);\r\n?>\r\n\r\nOnce we have the definition, we need to add the Drupal root and the URI to the definition:\r\n\r\n<?php\r\n$aliases[\'subsite\'] = array(\r\n  \'root\' => \'/Users/erikp/Sites/drupal\',\r\n  \'uri\' => \'subsite.vmdev\',\r\n);\r\n?>\r\n\r\nThis allows drush to know which specific drupal site we\'re referring to no matter what directory we happen to be in. So now we can run commands against the new alias by using the <code>@aliasname</code> syntax with drush:\r\n\r\n<code>\r\ndrush @subsite status\r\n</code>\r\n\r\n<h2>Remote aliases</h2>\r\n\r\nOne powerful feature of drush is its ability to communicate with Drupal sites on other servers over SSH. Aliases can take advantage of this as well by using the <code>remote-host</code> and <code>remote-user</code> keys in the site alias definition:\r\n\r\n<?php\r\n$aliases[\'real_site\'] = array(\r\n  \'remote-host\' => \'myserver.eporama.com\',\r\n  \'root\' => \'/home/www/drupal-6.22\',\r\n  \'uri\' => \'mysite.eporama.com\',\r\n);\r\n?>\r\n\r\nThis would create an alias to the website that has a URL of <code>mysite.eporama.com</code> which lives on the server <code>myserver.eporama.com</code> and has a different path to where Drupal is installed.\r\n\r\nNow, from my local machine, not logged into the remote machine, I can still use drush:\r\n\r\n<code>\r\ndrush @real_site status\r\n</code>\r\n\r\n<h2>MySQL Dumps</h2>\r\n\r\nIf you\'re going to be running <code>drush sql-dump</code> or <code>drush sql-sync</code>, it helps to let drush know where you\'d like to have the dump files stored. You can do this by specifying a <code>dump-dir</code>. However, <code>dump-dir</code> is actually a sub variable of <code>path-aliases</code>.\r\n\r\n<?php\r\n$aliases[\'real_site\'] = array(\r\n  \'remote-host\' => \'myserver.eporama.com\',\r\n  \'root\' => \'/home/www/drupal-6.22\',\r\n  \'uri\' => \'mysite.eporama.com\',\r\n  \'path-aliases\' => array(\r\n    \'%dump-dir\' => \'/home/erikp/drush-dumps\',\r\n  ),\r\n);\r\n?>\r\n\r\nWhen <code>sql-sync</code> runs, it first dumps the database on the source server, then copies the dump file to the target server, and finally imports the dump file into the target database server. The <code>dump-dir</code> is where it will store these dump files. If you call for a second <code>sql-sync</code> within 24 hours, drush will assume that the existing dump file is good enough. If you need to get a fresh sql file, you can add the parameter <code>--no-cache</code>.\r\n\r\nTo sync two databases, you specify the source database first and then the target database:\r\n\r\n<code>\r\ndrush sql-sync @real_site @subsite\r\n</code>\r\n\r\n<h2>Parental Aliases</h2>\r\n\r\nOnce you have a significant number of aliases defined (probably more than two), you\'ll start to notice that there is a lot of repetition. Every site on the same multisite needs the same <code>root</code> the same <code>dump-dir</code>, etc. Luckily, you can take these common pieces and group them together in a single alias and then use that alias inside of other aliases.\r\n\r\n<?php\r\n$aliases[\'local-site\'] = array(\r\n  \'root\' => \'/Users/erikp/Sites/drupal-6.22\',\r\n  \'path-aliases\' => array(\r\n    \'%dump-dir\' => \'/Users/erikp/drush-dumps\',\r\n  ),\r\n);\r\n$aliases[\'subsite\'] = array(\r\n  \'parent\' => \'@local-site\', // this refers to the alias defined above \r\n  \'uri\' => \'subsite.vmdev\',\r\n);\r\n?>\r\n\r\nThe <code>subsite</code> alias inherits the information from the <code>local-site</code> alias.\r\n\r\nIn my aliases file, I have defined three \"parent\" aliases on which all of my other aliases are based. They are <code>local</code>, <code>dev</code>, and <code>prod</code> which give the remote-host, root, dump-dir for my local machine and our development and production servers. Then for each new site, I can quickly create three new aliases one for each environment:\r\n\r\n<?php\r\n$aliases[\'local.new-site\'] = array(\r\n  \'parent\' => \'@local\',\r\n  \'uri\' => \'new-site.org\',\r\n);\r\n$aliases[\'dev.new-site\'] = array(\r\n  \'parent\' => \'@dev\',\r\n  \'uri\' => \'new-site.org\',\r\n);\r\n$aliases[\'prod.new-site\'] = array(\r\n  \'parent\' => \'@prod\',\r\n  \'uri\' => \'new-site.org\',\r\n);\r\n?>\r\n\r\n<h2>Multiple Alias files</h2>\r\n\r\nYou can also keep multiple alias files if that would help keep things more organized for you. I have a file for work Drupal sites (<code>edc.aliases.drushrc.php</code>) and a separate file for non-work sites that I work on (<code>my.aliases.drushrc.php</code>). This way, I can share the work site alias file with the other developers in our office and it helps keep things organized and makes sure that when I recommend running <code>drush @oursite cc all</code> that the alias will be the same for each of us.\r\n\r\nDrush will look for these files in a number of places, but the most common is to put them in a folder called <code>aliases</code> in your <code>$HOME/.drush</code> directory. If you would like to have them in a specific location, you can specify any path you want in <code>drushrc.php</code>.',1,'2011-06-14'),
	(15,'Keeping drupal sites under control','Version control is a hot topic in terms of managing and deploying sites. Now that drupal.org has moved from a server-based version control system (CVS) to a distributed version control (git), some developers have been on the push to move their own development strategies into git to have one control system to manage all of their files.\r\n\r\nKeeping files \"under version control\" means that you\'re going to add an extra step to the saving and managing of your files. Git does not automatically track all changes to files that you\'re working on. Git does not even track files per se. It actually only tracks changes to the files which is a slightly different concept and will come up again later.\r\n\r\nThe basic concept of git is that you create a repository, work on files, then stage all or some of your changes into the repository. Once a set of changes are ready to be grouped together, you can \"commit\" them as one single set of changes to multiple files/directories. These commits are the distinct points in time for the repository.\r\n\r\nOne of git\'s strengths is in it\'s \"distributed\" nature. You don\'t need to be in contact with the mothership to do your work. While groups can set up their own hierarchies and procedures, technically, no one repository is more important than another. When you do create an \"upstream\" or server-based repository whether on github or on your own server, it\'s still simply a git repository like any other even if you consider it the shared repository from which everyone will fetch code.\r\n\r\n<h2>Setting up git</h2>\r\n\r\nThere are many tutorials for setting up git, but the one that seems to be the most straight forward is github\'s tutorial http://help.github.com/set-up-git-redirect \r\n\r\nEven if you\'re not using GitHub, the instructions are pretty easy to follow. If you\'re not using Github, you can skip steps like: \"4. Add your SSH key to GitHub\" however, having a github account is not a bad thing, so when it doubt follow all of the steps and you\'ll still be ready to git.\r\n\r\n<h2>Keeping a site under git</h2>\r\n\r\nSince I generally use Drupal multisites and don\'t kill kittens, I will keep each drupal_root/sites/<sitefolder> as a separate repository. I don\'t need to keep the whole Drupal install under control because the core files will never change. Plus, I typically work on sites that are/will be part of a multisite anyway.\r\n\r\n<h2>Get git started</h2>\r\n\r\nIf you\'re building a site from scratch and there is no existing repository, create the basics of the site (files directory, settings.php, etc.) and then create your git repo.\r\n\r\n<code>\r\ncd ~/Sites/drupal/sites;\r\nmkdir subsite.vmdev;\r\nmkdir subsite.vmdev/files;\r\ncp default/default.settings.php subsite.vmdev/settings.php\r\n</code>\r\n\r\nDepending on how you\'re going to be using the version control, you may or may not want to have your <code>files</code> directory controlled. Typically those are user uploaded files and site specific and don\'t need to be transferred if you\'re using git as part of a deployment strategy. \r\n\r\nAlso, I almost never keep settings.php in the repository so that you don\'t ever accidentally spread your database username and password around. Luckily git provides an easy way for us to ask git to ignore certain files/folders. If you create a file named <code>.gitignore</code> (the leading dot is important), then you can write out file names or patterns that you would like to have excluded from the repository.\r\n\r\n<code>\r\necho \"settings.php\" > .gitignore\r\necho \"files/\" >> .gitignore\r\n</code>\r\n\r\nNow that you have the files for a working Drupal site, you can initialize your git repository.\r\n\r\n<code>\r\ngit init\r\n</code>\r\n\r\nThat\'s it. Now you have a completely functional, albeit empty repository ready for action.\r\n\r\n<h2>Using git in the building process</h2>\r\n\r\nOnce you\'ve started downloading contrib modules, themes, and libraries, and creating your subtheme and custom modules, your directory structure will start changing. How often you update your git repository is a very personal choice. There are those who \"commit early, commit often\" which leads to great history and identifiability for all things and there are those who commit only when they\'re ready to share their code. As with most things, my preferred method is somewhere in the middle.\r\n\r\nTo commit changes to your repository, you need to stage which changes you\'d like to commit and then write a single commit for them. Typically, I will commit when a) adding a cohesive set of modules, b) finishing an individual task, or c) fixing a quick bug.\r\n\r\nSo, one example would be when I get \"calendar\" set up.\r\n\r\n<code>\r\nmkdir modules/contrib\r\ndrush dl calendar, date, views, jquery_ui\r\ngit add modules/contrib/calendar modules/contrib/date modules/contrib/views modules/contrib/jquery_ui\r\ngit commit -m \"Downloaded calendar and necessary modules (date, views, jquery_ui)\"\r\n</code>\r\n\r\nIf I had an existing custom module <code>subsite_fixes</code> and had finished writing the code that incorporated a custom block, I might do the following:\r\n\r\n<code>\r\ngit add modules/custom/subsite_fixes/\r\ngit commit -m \"Updated to incorporate new strategic block\"\r\n</code>\r\n\r\nA \"task\" might incorporate changes to more than one file. There may be CSS changes, PHP changes and exports that need to be updated. Those can all be done in a single commit as long as they\'re all related.\r\n\r\nNext up: Sharing your git repositories\r\n\r\n',1,'2011-08-02'),
	(16,'Migration bliss','I have recently been working on a few projects that involve migrating legacy data to Drupal. In the past, I have used node_import, node_export, user_import, feeds, and migrate (version 1.x) and each has its pros and cons. But this project had a little more complexity and some pieces that I wasn\'t sure of how to approach with any of these methods. So I decided it was time to dive into migrate version 2.x.\r\n\r\nHaving used migrate-6.x-1.x for a couple of projects, I loved the way it worked. I was able to get everything done that I needed and rarely needed to extend it with any custom functions. That, plus the fact that I have not taken the full plunge into <abbr title=\"Object Oriented\">OO</abbr> PHP programming. I understand the concepts and have dabbled, but I\'m still not as facile at just getting things done. And since the Migrate UI is there for running imports, but not for defining them, you have to be willing to crack open a bit of code. But the allure proved too strong and I jumped in.\r\n\r\nTurns out that Migrate 2.x is sooooooo powerful that the extra brain cells to wrap my head around extending and classes was well worth it. As many have noted, even when Drupal itself isn\'t being really object oriented, many of the fundamental ideas of how it\'s built are the same. You build and then build on top instead of rewriting.\r\n\r\nTo get started, I looked for some tutorials online. The <a href=\"http://drupal.org/node/415260\">migrate documentation</a> is getting filled out and better all the time, but documentation almost always is a little daunting to start. I did find a good, concise <a href=\"http://www.gizra.com/content/data-migration-part-1\">tutorial at Gizra.com</a> which in conjunction with the documentation led to a fairly quick start.\r\n\r\n<h2>Step 1: Define a custom module</h2>\r\n\r\nTo get started with migrate v2, you will write your mappings and processes in a custom module, so I created a module in <code>modules/custom/mymigration</code>\r\n\r\nmymigration.info:\r\n<code>\r\n; $Id$\r\nname = My Migration Tools\r\ndescription = Migrate module helper functions\r\npackage = custom modules\r\ncore = 6.x\r\n\r\ndependencies[] = migrate\r\n</code>\r\n\r\nmymigration.module:\r\n<?php\r\n/**\r\n * @file\r\n * This module will provide the migrate helper functions for mymigration \r\n */\r\n\r\n/**\r\n * Implmentation of hook_migrate_api().\r\n * \r\n * @return The migrate api version number\r\n */\r\nfunction mymigration_migrate_api() {\r\n  $api = array(\r\n    \'api\' => 2,\r\n  );\r\n  return $api;\r\n}\r\n?>\r\n\r\nThen with enabling this module and migrate (and its D6 dependencies), we are good to get started.\r\n\r\n<code>drush dl migrate autoload dbtng elements\r\ndrush en mymigration migrate\r\n</code>\r\n\r\nTo understand a basic migration script, really reading through the <a href=\"http://drupal.org/node/1006984\">Migration classes</a> page of the documentation is helpful.\r\n\r\nFor my particular  migration, I had a couple of issues crop up:\r\n<ol>\r\n <li>Source data was in a different database</li>\r\n <li>Query was more complex than a simple select</li>\r\n <li>CCK \"link\" didn\'t have a MigrateFieldHandler</li>\r\n <li>Source data needed to be massaged on way in</li>\r\n <li>Files already existed</li>\r\n</ol>\r\n\r\n<h2>Grabbing data from a different database</h2>\r\nSo, the source data was in a MySQL database on the same server, so I didn\'t feel the need to import it into the Drupal database. To grab this data, I created a new database connection in my <code>settings.php</code> file.\r\n\r\n<?php\r\n// $db_url = \'mysql://root:root@localhost/databasename\';\r\n// replaced the standard $db_url with the key\'d array\r\n$db_url[\'default\'] = \'mysqli://root:root@localhost/drupal_mydb\';\r\n$db_url[\'library_migration\'] = \'mysqli://root:root@localhost/old_source_db\';\r\n?>\r\n\r\nNow, in the migration module, I can create my <code>$query</code> object using a new connection instead of the more common <code>db_select()</code> function:\r\n\r\n<?php\r\n    $query = Database::getConnection(\'default\', \'library_migration\')\r\n      ->select(\'ITEM\', \'old_items\');\r\n?>\r\n\r\nIn Drupal 6.x this is part of the required migrate dependency <a href=\"http://drupal.org/project/dbtng\">dbtng</a>. One part that confused me for a bit is that the getConnection has a first parameter of <code>\'default\'</code>. This is <em>not</em> the same as the <code>$db_url[\'default\']</code>. In this case, it\'s the database \"target\" which is separate from the connection \"key\" and is mostly used in master/slave database instances. For basic usage, it should always be set to \'default\'.\r\n\r\n<h2>More complexitation in the query</h2>\r\n\r\nThe above <code>$query</code> is equivalent to the following sql statement for my database: <code>SELECT * FROM `ITEM` `old_items`;</code>, but we actually need to have the following statement built: \r\n\r\n<code>\r\nSELECT DISTINCT old_items.itemid, old_items.title, old_items.title, old_items.creator, old_items.identifier FROM `ITEM` `old_items` INNER JOIN `CATEGORY_ITEM` `c` ON old_items.itemid = c.itemid WHERE old_items.status <> \'deleted\';\r\n</code>\r\n\r\nThis translates to the following DBTNG code:\r\n\r\n<?php\r\n    $query = Database::getConnection(\'default\', \'library_migration\')\r\n      ->select(\'ITEM\', \'old_items\');\r\n    $query->leftJoin(\'CATEGORY_ITEM\', \'c\', \'old_items.itemid=c.itemid\');\r\n    $query->condition(\'status\', \'deleted\', \'<>\');\r\n    $query->fields(\'old_items\' ,array(\r\n        \'itemid\',\r\n        \'title\',\r\n        \'creator\',\r\n        \'identifier\',\r\n    )->distinct();\r\n?>\r\n\r\n<h2>The missing link</h2>\r\n\r\nOne of the fields, \'identifier\' is actually a <a href=\"http://drupal.org/project/link\">CCK Link</a> field in the new Drupal content-type.\r\n\r\nIt turns out that link doesn\'t have a MigrateFieldHandler class yet. I found <a href=\"http://drupal.org/node/1010850\">an issue</a> in the link issue queue which had a patch for Drupal 7 link fields, but not for Drupal 6.\r\n\r\nSo I wrote out a version for link-6.x-2.x-dev and posted it <a href=\"http://drupal.org/node/1010850#comment-4960284\">as a patch</a>.\r\n\r\n<code>\r\ncd modules/contrib/link\r\nwget http://drupal.org/files/issues/link_migrate-1010850-10-d6.patch\r\npatch -p1 < link_migrate-1010850-10-d6.patch\r\n</code>\r\n\r\n<h2>Bliss with a good massage</h2>\r\n\r\nThe <code>identifier</code> field in the original database had links to the actual resource of that the node was describing. For us, this was either an external URL or an internal URL pointing at a file (pdf, ppt, etc.). We wanted to migrate the internal resources to be actual attachments as a filefield while maintaining the external URLs in a link field.\r\n\r\nThe trick is to use Migrate\'s <code>prepareRow()</code> to affect the data. Typically to map a field, you add a field mapping:\r\n\r\n<?php\r\n    $this->addFieldMapping(\'drupal_field_machine_name\', \'source_data_field\');\r\n?>\r\n\r\nFor the two fields, we want to use pieces of the same source:\r\n\r\n<?php\r\n    $this->addFieldMapping(\'field_lr_location\', \'identifier\');\r\n    $this->addFieldMapping(\'field_lr_file\', \'identifier\');\r\n?>\r\n\r\nBut what we really want is to create new fields on the <code>$row</code> before the import happens and fill them with the correct data.\r\n\r\n<?php\r\n  public function prepareRow($row) {\r\n   if (substr($row->identifier, 0, 31) == \'http://www.oldsite.org/library/\'){\r\n     $row->loc_file = trim(substr($row->identifier, 31));\r\n     $row->loc_url = \'\';\r\n   }\r\n   else {\r\n     $row->loc_url = trim($row->identifier);\r\n     $row->loc_file = \'\';\r\n   }\r\n  }\r\n?>\r\n\r\nThen in the mappings, we can use the new \"fields\".\r\n\r\n<?php\r\n    $this->addFieldMapping(\'field_lr_location\', \'loc_url\');\r\n    $this->addFieldMapping(\'field_lr_file\', \'loc_file\');\r\n?>\r\n\r\n<h2>Thanks, I\'ve already got my files</h2>\r\n\r\nTrying to sort all of this out, I had already set up my files/library folder to accommodate all of the PDFs etc. that would be attached to the nodes and set the filefield to store them there. Also, I had copied over all of the necessary PDFs and didn\'t need to move/copy the files again, just to create the <code>files</code> table records and include the new <code>fid</code>s into the nodes.\r\n\r\nWhen creating the arguments for the filefield mapping handler, you specify two parameters, where the files should go and which \"file function\" you want to use. Most of the examples I read used either \'file_copy\' or \'file_move\' which basically do exactly what you\'d expect. But there are a few more including \'file_link\' which is described in <code>MigrateFileFieldHandler()->prepare()</code> in <code>fields.inc</code> as:\r\n\r\n<?php\r\n  case \'file_link\':\r\n  // The file is copied by some outside process (e.g., rsync), and we\r\n  // just need to make sure it\'s present and has a files table row.\r\n  // Not present - skip\r\n?>\r\n\r\nSo my full mapper for the file field is:\r\n\r\n<?php\r\n    // Setup file migration for IDENTIFIER fields that are files\r\n    $arguments = MigrateFileFieldHandler::arguments(file_directory_path() . \'/library/\',\r\n      \'file_link\');\r\n    $this->addFieldMapping(\'field_lr_file\', \'loc_file\')\r\n         ->arguments($arguments);\r\n?>',1,'2012-04-15'),
	(17,'Develop Locally','I presented at Drupal Camp New Hampshire 2011 and Drupal Camp MA 2012. \r\n\r\nThis talk was about running Drupal locally and how to set up a good development environment.\r\n\r\nEdit: [2011-11-10] Just found out there\'s an error on the location of the my.cnf file. MAMP 2.x wants them in /Applications/MAMP/conf ...  slides updated.\r\n',2,'2011-10-16'),
	(18,'Migrate nodereferences with dissimilar keys','I ran into a problem using the <a href=\"http://drupal.org/project/migrate\">Migrate module</a> where I migrated a series of newsletter issues and then imported a series of articles that were related to each newsletter.\r\n\r\nTypically, for nodereferences, you can add a dependency of the first migration. If both the newsletter issue table used a primary key and the article table used a foreign key of \"issueid\" then the mapping is very straight forward.\r\n\r\n<?php\r\nclass IssueMigration extends Migration {\r\n  public function __construct() {\r\n    parent::__construct();\r\n    $query = db_select(\'issues\', \'i\');\r\n    $query->fields(\'i\', array(\'issueid\', \'dateposted\'));\r\n    $this->source = new MigrateSourceSQL($query);\r\n  }\r\n}\r\n\r\nclass ArticleMigration extends Migration {\r\n  public function __construct() {\r\n    parent::__construct();\r\n    $this->depedencies = array(\'Issue\');\r\n    $query = db_select(\'articles\', \'a\');\r\n    $query->fields(\'a\', array(\'articleid\', \'issueid\'));\r\n    $this->source = new MigrateSourceSQL($query);\r\n    $this->addFieldMapping(\'field_issue_ref\',\'issueid\')->sourceMigration(\'Issue\');\r\n  }\r\n}\r\n?>\r\n\r\nMigrate will know to use the actual nid of the imported issue for the node reference by looking at the migrate_map_issues table.\r\n\r\nThe problem was that in the source data for the issues the primary key was actually \"archiveid\" and the foreign key column in the articles table was \"issueid\".\r\n\r\n<?php\r\n  $query->fields(\'i\', array(\'archiveid\', \'dateposted\'));\r\n?>\r\n\r\nand the articles uses a foreign key column named \"issueid\",\r\n\r\n<?php\r\n  $query->fields(\'a\', array(\'articleid\',\'issueid\'));\r\n?>\r\n\r\nthe node reference mapping from migrate doesn\'t know which to use for the mapping:\r\n\r\n<?php \r\n  $this->addFieldMapping(\'field_issue_ref\', \'issueid\')->sourceMigration(\'NewsletterIssue\');\r\n?>\r\n\r\nthe solution is to make sure that the virtual names of the columns do match. The <code>fields()</code> does not allow for modifying column aliases, but using the individual <code>addField()</code> does.\r\n\r\n<?php\r\n  $query->fields(\'i\', array(\'dateposted\'));\r\n  $query->addField(\'i\', \'archiveid\', \'issueid\');\r\n?>\r\n\r\nThis is the equivalent of <code>SELECT i.dateposted, i.archiveid AS issueid FROM issues</code> and migrate will match up the keys and get the right nid to use as a reference.\r\n',3,'2011-10-24'),
	(19,'Drupal login redirection','One handy trick I\'ve found is that when you\'re visiting a Drupal page and you notice that you\'re not logged in, you can simply add <code>user?destination=</code> into the URL right after the root of your Drupal site and keep the path. This means that \r\n\r\n<code>http://eporama.com/ramblings\r\n</code>\r\n\r\nbecomes \r\n\r\n<code>http://eporama.com/user?destination=ramblings\r\n</code>\r\n\r\nThen when you log in, you\'re brought back to the page you were viewing with no fuss.\r\n\r\nI do this often enough that I decided to make it a bookmarklet. \r\n\r\n<pre><code>javascript: function adduser() {\r\n  var d = document,\r\n  b = d.body,\r\n  l = d.location;\r\n  try {\r\n    if (!b) throw (0);\r\n    d.location.href = \'user?destination=\' + l.pathname.substring(1);\r\n  } catch(e) {\r\n    alert(\'please wait\');\r\n  }\r\n}\r\nadduser();\r\nvoid(0);\r\n</code></pre>\r\n\r\nThis seems to work well in Firefox, Chrome and Safari on the Mac... and here\'s the condensed version ready to be copied into a bookmark.\r\n\r\n<code>javascript: function adduser() {var d=document,b=d.body,l=d.location;try {if (!b) throw (0);d.location.href=\'/user?destination=\'+l.pathname.substring(1);} catch(e) {alert(\'please wait\');}}adduser();void(0);</code>',1,'2011-12-12'),
	(20,'Multisite presentation','I presented a talk on Drupal Multisites at <a href=\"http://drupalcampma.com\">DrupalCamp MA 2012</a>.\r\n\r\n[edit 1/21/2012] I have uploaded the slides as I presented.\r\nThanks for everyone\'s support.',2,'2012-01-21'),
	(21,'Multisites on shared hosting','I have been asked and seen some recent posts on folks having trouble setting up Drupal multisites on their shared hosting, specifically Dreamhost, Bluehost, etc. I figured it might be worth giving the basics for any hosting on how to get Drupal multisites to work.\r\n\r\nMost ISP/hosting companies allow you to host multiple websites on a single account. Either separate as domains or \"subdomains\", you can host multiple websites on your account. Traditionally, two separate websites are served from separate directories. When two addresses point to the same directory (or in Apache httpd-speak) share a single DocumentRoot the websites serve the same files.\r\n\r\nHowever, with Drupal multisites, this is exactly what happens and we want the same files to be served. Drupal\'s multisite capabilities happen within those files. \r\n\r\nSo the best thing you can do is to set up your first Drupal site as per the host\'s instructions. Then for the second site, don\'t set up a fully hosted subdomain. You want to set up the second domain as a \"mirrored\" domain (Dreamhost) or a \"parked\" domain (Bluehost).\r\n\r\nYou can set up multiple databases on either of these hosts as well, so don\'t reuse the same database for each multisite, you want to use separate databases.\r\n\r\nIn Dreamhost, visit your \"Domains\" secion and choose \"Add New Domain / Sub-Domain\". Skip the \"Fully hosted\" section and go straight to the \"Mirrored\" section. Fill in the name of your new domain/subdomain and then choose the original Drupal site from the drop down list.\r\n\r\nIn your Drupal web folder, create a sites/newdomain.mydomain.com (substituting your real domain/subdomain) and then copy the default.settings.php into that directory as settings.php.  Now you should be able to visit http://newdomain.mydomain.com/install.php and proceed as a normal Drupal installation. ',1,'2012-02-26'),
	(22,'Using Migrate','Migrate is a module that lays a framework to be able to get data into Drupal. It allows you to describe sources and destinations for the data and any transformations that need to happen along the way. \r\n\r\nOne of the complexities of Drupal is the non-normalized data structures to describe content. Instead of building up massive tables and adding columns, Drupal tends to have a myriad of tables that are all joined on various keys. Migrate helps tremendously by removing the need to understand the underlying Drupal table structures. It also allows Drupal to manipulate the node information just as saving a node in the UI would do. \r\n\r\nMigrate is based on a set of Object Oriented PHP classes. These classes define the basic needs of a Migration: source, destination, etc. Migrate can use almost any structured data for a Source. It has plug-ins already defined for migrating MySQL data, XML data, CSV files, MSSQL and Oracle data. Out of the box, Migrate knows about the basic Drupal objects, Nodes, Terms, Users, Comments, etc. So with a very moderate amount of effort, we can, as an example, move MySQL data into Nodes.\r\n\r\nTo use Migrate, you build a custom module which will really just define the migration definitions. The module consists of an <code>.info</code> file, a basic <code>.module</code> file, and several <code>.inc</code> files, one for each migration class that you plan on defining.\r\n\r\nThe <code>.info</code> file:\r\n<code>\r\nname = epomigrate\r\ndescription = A migration class example\r\npackage = Custom migrations\r\ncore = 7.x\r\n\r\ndependencies[] = migrate\r\n</code>\r\n\r\nThe <code>.module</code> file to begin with, has nothing more than a call to <code>hook_migrate_api</code> to define which version of Migrate we should be using.\r\n\r\n<?php\r\nfunction epomigrate_migrate_api() {\r\n  $api = array(\r\n    \'api\' => 2,\r\n  );\r\n  return $api;\r\n}\r\n?>\r\n\r\nAll of the work to define the migration recipe is done in a <code>.inc</code> file. First we need to make that file included in the module by declaring it in the <code>.info</code> file.\r\n\r\n<code>\r\ndependencies[] = migrate\r\nfiles[] = story.inc\r\n</code>\r\n\r\nThe <code>story.inc</code> file will contain an extension of the <code>Migration</code> class that the Migrate module defines.\r\n\r\n<?php\r\nclass StoryMigration extends Migration { }\r\n?>\r\n\r\nThe primary function in an OO class it to use the <a href=\"http://php.net/manual/en/language.oop5.decon.php\">constructor method</a> which essentially is an initialization function where we will a) tell the object to run the parent constructor method and then b) define our mappings.\r\n\r\n<?php\r\nclass StoryMigration extends Migration {\r\n  public function __construct() {\r\n    parent::__construct();\r\n    $this->description = t(\'Migration of old stories into article nodes\');\r\n  }\r\n}\r\n?>\r\n\r\nI also added a simple \"description\" property to the class to demonstrate how properties are set.\r\n\r\nWe need to eventually define three properties for the class: source, destination, and a map. \r\n\r\n<?php\r\nclass StoryMigration extends Migration {\r\n  public function __construct() {\r\n    parent::__construct();\r\n\r\n    $this->description = t(\'Migration of old stories into article nodes\');\r\n\r\n    $this->source = new MigrateSourceSQL();\r\n    $this->destination = new MigrateDestinationNode();\r\n    $this->map = new MigrateSQLMap();\r\n  }\r\n}\r\n?>\r\n\r\n<em>From now on, I will not be copy the full code into the snippets, but rather only the code that has changed.</em>\r\n\r\n<h3>Source</h3>\r\n\r\nTo build up the source of the migration, we need to know the SQL statement that will be used to grab the stories from the source database. This is the time that you need to know the structure of the existing tables and syntax necessary to build a query.\r\n\r\nFor our example, we have a \"stories\" table with the following structure:\r\n\r\n<code>\r\nCREATE TABLE `stories` (\r\n  `storyid` int(11) unsigned NOT NULL AUTO_INCREMENT,\r\n  `title` varchar(255) NOT NULL DEFAULT \'\',\r\n  `body` text,\r\n  `userid` int(11) DEFAULT NULL,\r\n  `date_entered` datetime DEFAULT NULL,\r\n  `published` tinyint(1) DEFAULT NULL,\r\n  PRIMARY KEY (`storyid`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\r\n</code>\r\n\r\nThis table is in a separate MySQL database, \"migrations\" on the same server. The easiest way to be able to reference this database is to create a database connection in settings.php. Alternatively, you can create a database connection directly in our migration script\r\n\r\n<?php\r\nDatabase::addConnectionInfo(\'for_migration\', \'default\', array(\r\n  \'driver\' => \'mysql\',\r\n  \'database\' => \'migrations\',\r\n  \'username\' => \'root\',\r\n  \'password\' => \'\',\r\n  \'host\' => \'localhost\',\r\n  \'prefix\' => \'\',\r\n));\r\n?>\r\n\r\nThen we build up a query to grab the fields we are interested in.\r\n\r\n<?php\r\n$query = Database::getConnection(\'default\', \'for_migration\')\r\n         ->select(\'stories\', \'old_stories\');\r\n$query->fields(\'old_stories\'); // this grabs all fields from \"old_stories\"\r\n?>\r\n\r\nAnd we pass that into the <code>MigrateSourceSQL</code> object:\r\n\r\n<?php\r\n$this->source = new MigrateSourceSQL($query);\r\n?>\r\n\r\n<h3>Desintation</h3>\r\n\r\nThe destination is the easiest piece because typically we are migrating into known entity types. The schema and keys of these entities are defined within the migrate module. All we need to specify is which content-type of \"node\".\r\n\r\n<?php\r\n  $this->destination = new MigrateDestinationNode(\'article\');\r\n?>\r\n\r\n<h3>Map</h3>\r\n\r\nThe MigrateSQLMap helps us to define how the Migrate process will keep track of the old and the new information and the mappings between them. The map object takes four parameters: the machine name of the class that we\'re building, the primary key of the source, the primary key of the destination, and the database connection to use for the map tables. By default the connection used is the main Drupal connection named \"default\", unless we need to change that we don\'t have to include it.\r\n\r\n<?php\r\n  $this->map = new MigrateSQLMap($this->machineName, $source_key, $destination_key);\r\n?>\r\n\r\nWe need to define the source key by creating an array of the column name and it\'s definition:\r\n\r\n<?php\r\n  $story_definition = array(\r\n    \'type\' => \'int\',\r\n    \'unsigned\' => TRUE,\r\n    \'not null\' => TRUE,\r\n    \'description\' => \'ID of source row\',\r\n  );\r\n  $source_key = array(\'storyid\' => $story_definition);\r\n?>\r\n\r\nThe destination key is even easier because Migrate knows all about nodes and how they\'re keyed. There is a prebuilt class named <code>MigrateDestinationNode</code> which has a method <code>getKeySchema()</code> that returns the array for the keys of a node. \r\n\r\n<?php\r\n  $destination_key = MigrateDestinationNode::getKeySchema();\r\n?>\r\n\r\nGenerally, instead of creating lots of placeholder variables like <code>$nid_definition</code>, <code>$source_key</code>, and <code>$destination_key</code>, you will see in the examples, all of the pieces put directly into the <code>MigrateSQLMap()</code> construction.\r\n\r\n<?php\r\n  $this->map = new MigrateSQLMap(\r\n    $this->machineName,\r\n    array(\r\n      \'storyid\' => array(\r\n        \'type\' = \'int\',\r\n        \'unsigned\' => TRUE,\r\n        \'not null\' => TRUE,\r\n        \'description\' => \'ID of the source row\',\r\n      )\r\n    ),\r\n    MigrateDestinationNode::getKeySchema();\r\n  );\r\n?>\r\n',1,'2012-04-07'),
	(23,'Sublime 2.0 and Drupal','So we\'ve been all excited about the new version of the <a href=\"http://www.sublimetext.com\">Sublime text editor</a>.  It has some really nice new functions like replace all as you type (Find all). And split screen functionality.\r\n\r\nOne thing that was missing was the ability to jump to a definition of a function when it wasn\'t in the same file or an open file. To get this solved, you need to use the <a href=\"http://en.wikipedia.org/wiki/Ctags\">ctags application</a> to generate an index of the function definitions and the <a href=\"https://github.com/SublimeText/CTags\">Sublime CTags</a> package to allow Sublime to take advantage of the tags.\r\n\r\nOn my Mac Lion OS, the version of ctags that was available did not have the functionality that you need, so it is important to install a newer version of ctags. For me this was simply a brew install:\r\n<code>\r\nbrew install ctags\r\n</code>\r\n\r\nThen navigating to the root of my Drupal project, I can run ctags to generate the tags index file.\r\n\r\n<code>\r\ncd Sites/drupal\r\nctags -R -f .tags\r\n</code>\r\n\r\nThis did not work completely, however as by default, ctags does not know that <code>.module</code> and <code>.inc</code> files are php files to be searched. The command line option for this is to add these to the mapping for php:\r\n\r\n<code>\r\nctags -R -f .tags --langmap=PHP:+.inc.module\r\n</code>\r\n\r\nHowever, this is problematic because rebuilding tags from within Sublime will lose this mapping. To solve this, you can make <code>--langmap=PHP:+.inc.module</code> a default option by putting it in a .ctags file in your home directory.\r\n\r\n<code>\r\necho \"--langmap=PHP:+.inc.module\" > ~/.ctags\r\n</code>\r\n\r\nNow the rebuild will use that mapping even when run from Sublime.\r\n\r\nTo use this functionality, put the cursor within a function name that is being called and click <code>ctrl-opt-]</code>. This should now bring up the definition of the function you were curious about no matter where it is defined in the Drupal code base. It does not work for built-in PHP commands, but at least should work for Drupal commands.\r\n\r\nThis paired with <a href=\"http://drupal.org/project/sublime_completion\">Sublime Autocompletion</a> makes Drupal development in Sublime 2.0 much nicer.',3,'2012-07-29'),
	(24,'The innocuous variable_set ','It seems like such a simple piece of code.\r\n\r\n<?php\r\n variable_set(\'myvar\', \'thevalue\');\r\n?>\r\n\r\nBut it can bring your site to its knees very quickly when used too much.\r\n<!-- break -->\r\n\r\n<h2>Overquerying</h2>\r\n\r\nRecently on a few sites, when they are experiencing extreme slowness or throwing 503 errors we have found a single problem, <code>variable_set();</code>. Trying to trace the issues back, using tools like <a href=\"http://jeremy.zawodny.com/mysql/mytop/\">mytop</a>, we see that there are lots of slow queries and many, many queries of:\r\n\r\n<code>\r\nselect name, value from variable;\r\n</code>\r\n\r\nBut wait! Isn\'t the variable table cached? We shouldn\'t be selecting so many times from the variable table if we can get the serialized version of the table from cache.\r\n\r\n<?php\r\n$cached = cache_get(\'variables\', \'cache_bootstrap\');\r\n?>\r\n\r\nThe problem is that <a href=\"http://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/variable_set/7\">variable_set</a> needs to clear the variables element out of the cache.\r\n\r\n<?php\r\ncache_clear_all(\'variables\', \'cache_bootstrap\');\r\n?>\r\n\r\nBut <em>every single</em> page request that hits the backend loads the bootstrap.inc file which calls <a href=\"http://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/variable_initialize/7\">variable_initialize</a> which needs to load the entire variables table. So if the site is under load, we are not only having slow queries for things that are expected to be long, but if one <code>select * from variables</code> starts to back up, then all of the subsequent requests are held until the first one finishes which causes a stampede.\r\n\r\nSo if you\'re setting variables too often, you\'re clearing the cached version of the variables table too often, which means extra writes to variables, and updates to cache. And while all of that happens, the cached version isn\'t available, so any page requests need variables, and therefore start stampeding on the database.\r\n\r\n<h2>Tracking down the problems</h2>\r\n\r\nSearching through the code and seeing what variables are being set can help track down what is causing this problem. Sometimes, it\'s simply a matter of adding some debugging to the <code>variable_set</code>.\r\n\r\n<?php\r\nfunction variable_set($name, $value) {\r\n  global $conf;\r\n\r\n  //adding some debugging \r\n  syslog(\'LOG_DEBUG\', \"$name set to $value\");\r\n\r\n  db_merge(\'variable\')->key(array(\'name\' => $name))->fields(array(\'value\' => serialize($value)))->execute();\r\n\r\n  cache_clear_all(\'variables\', \'cache_bootstrap\');\r\n\r\n  $conf[$name] = $value;\r\n}\r\n\r\n?>\r\n\r\nThis sends information to the LOG_DEBUG system log which in our hosting is /var/log/debug. If you\'re going to use this, make sure you know that syslog is running and where LOG_DEBUG will write it\'s messages. On my local Mac, I just use LOG_NOTICE since I\'m not worried about syslog files filling up or getting lost among other processes.\r\n\r\n<h2>Mitigating Factors</h2>\r\nSo the good news is that there have been recent developments in core and contrib modules to mitigate this issue. Drupal 7 introduced cache stampede protection for this. Memcache has this as well and so does Pressflow. They help to slow the symptoms, but still don\'t solve the original problem.\r\n\r\nTracking down two variable_sets saved one customer about $10K in hardware costs just making the site respond more efficiently.\r\n\r\nFind \'em. Fix \'em.\r\n',1,'2012-09-30');

/*!40000 ALTER TABLE `stories` ENABLE KEYS */;
UNLOCK TABLES;



/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
